#ifndef __SDSCC__
#include "tests.h"

#define NUMP 1000
static const real k_grid[NKGRID] = {
	0.000000000000000,
	0.000000000010729,
	0.000000001373294,
	0.000000023464024,
	0.000000175781665,
	0.000000838192193,
	0.000003003395022,
	0.000008835676454,
	0.000022500053092,
	0.000051315822930,
	0.000107288600702,
	0.000209075165913,
	0.000384434562875,
	0.000673220085446,
	0.001130966586061,
	0.001833126880229,
	0.002880006795749,
	0.004402466118336,
	0.006568425334990,
	0.009590226225555,
	0.013732940889895,
	0.019323633983731,
	0.026761621236801,
	0.036529898643494,
	0.049207624047995,
	0.065483748912811,
	0.086172170937061,
	0.112227700650692,
	0.144763723015785,
	0.185071527957916,
	0.234640240669250,
	0.295178949832916,
	0.368640869855881,
	0.457247465848923,
	0.563515663146973,
	0.690287411212921,
	0.840758442878723,
	1.018510818481445,
	1.227548956871033,
	1.472332715988159,
	1.757816433906555,
	2.089491844177246,
	2.473425149917603,
	2.916303873062134,
	3.425487518310547,
	4.009048461914062,
	4.675827026367188,
	5.435489654541016,
	6.298575878143311,
	7.276560783386230,
	8.381919860839844,
	9.628192901611328,
	11.030037879943848,
	12.603313446044922,
	14.365145683288574,
	16.334003448486328,
	18.529756546020508,
	20.973821640014648,
	23.689155578613281,
	26.700399398803711,
	30.033950805664062,
	33.718063354492188,
	37.782905578613281,
	42.260772705078125,
	47.186031341552734,
	52.595329284667969,
	58.527675628662109,
	65.024520874023438,
	72.130004882812500,
	79.890884399414062,
	88.356788635253906,
	97.580299377441406,
	107.617080688476562,
	118.525978088378906,
	130.369384765625000,
	143.212997436523438,
	157.126266479492188,
	172.182403564453125,
	188.458587646484375,
	206.036026000976562,
	225.000503540039062,
	245.441925048828125,
	267.454956054687500,
	291.138977050781250,
	316.598419189453125,
	343.942626953125000,
	373.286895751953125,
	404.751434326171875,
	438.462402343750000,
	474.551910400390625,
	513.158203125000000,
	554.425659179687500,
	598.505859375000000,
	645.556518554687500,
	695.742675781250000,
	749.236511230468750,
	806.217712402343750,
	866.873474121093750,
	931.399780273437500,
	1000.000000000000000
};

int test_bfindrange_100(void)
{
	int fails = 0;
	range_t ra, rb;
	real p;
	real vec[10];
	const real *src = k_grid;

	/** Test random vector */
	for (int i = 0; i < NUMP; ++i) {
		p = (real) rand() / (real)(RAND_MAX/1000.0);
		ra = hw_findrange_n100(p, src);
		rb = hw_bfindrange_n100(p, src);
		if (ra != rb)
			++fails;
	}

	/** Test small values */
	for (int i = 0; i < NUMP; ++i) {
		p = (real) rand() / (real)(RAND_MAX/21.0);
		ra = hw_findrange_n100(p, src);
		rb = hw_bfindrange_n100(p, src);
		if (ra != rb)
			++fails;
	}

	/** Test tiny values */
	for (int i = 0; i < NUMP; ++i) {
		p = (real) rand() / (real)(RAND_MAX/2.0);
		ra = hw_findrange_n100(p, src);
		rb = hw_bfindrange_n100(p, src);
		if (ra != rb)
			++fails;
	}

	/** Test vector covering first and last values */

	return fails;
}

int test_hw_util(void)
{
	int result = 0;
	int cr;

	cr = test_bfindrange_100();
	result |= cr;

	return result;
}

#endif